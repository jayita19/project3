version: 2.1
orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@2.0.3

commands:

  slack-failure:
    description: sending falure notifications on slack
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Failure* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
  slack-success:
    description: sending succeeded notifications on slack
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Success* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string" 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name front-end-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name back-end-<<parameters.workflow_id>>
           
 
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |            
            export migration_status=`(curl -H "token: 75a942ed-f1df-4c6b-8c91-3fd221042720" --request GET https://api.memstash.io/values/migration)`
            if [ $migration_status -eq 1 ]; 
            then
              echo "starting migration"
              cd backend
              npm install
              npm run migrations:revert
            else
              echo " No Migration value found at memstash"
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-failure
      - slack-success          

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-failure
      - slack-success          

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack-failure
      - slack-success            
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm test
      - slack-failure
      - slack-success
      
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install             
            npm audit fix --audit-level=critical  --force
      - slack-failure
      - slack-success            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build] 
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical  --force
      - slack-failure
      - slack-success            

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml --region=us-west-2 \
              --tags project3=back-end \
              --stack-name "back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
          no_output_timeout: 30m 

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml --region=us-west-2 \
              --tags project3=front-end \
              --stack-name "front-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          no_output_timeout: 30m

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum install -y tar # install the tar
            yum install -y gzip # install the gzip
            aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicDnsName"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --no-paginate --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
           

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install ssh and git and aws cli
          command: |
            apk add --update openssh-client #Insatll ssh
            apk add --update git #Insatll git
            
            
      - checkout
      - add_ssh_keys:
          fingerprints: ["f8:c9:b0:b2:30:ed:73:81:a7:f5:18:75:ec:63:7b:19"] 
      - attach_workspace:
          at: ~/
      - run : |
          cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl #install the dependencies needed for your playbook
            pip install awscli # install aws cli

      - run:
          name: add value in the backend/.env file
          command: |
            touch backend/.env
            #echo NODE_ENV=production >> "backend/.env"
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
          no_output_timeout: 30m
       
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

          
#
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install PIP and aws cli
          command: |
            sudo apt-get install python-pip python-dev
            sudo pip install awscli
            pwd
            ls -la
      - run:
          name: add value in the backend/.env file
          command: |            
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install --no-fund
            npm audit fix --audit-level=critical
            npm run build
            pwd
            echo " THIS IS .env CONTENTS:"
            cat .env
            npm run migrations:revert
            echo "starting Migration" > Jayita_migrations.txt
            npm run migrations >> Jayita_migrations.txt
            echo " =========================================="
            echo "THIS IS migrations.txt CONTENTS:"
            cat Jayita_migrations.txt
            
          no_output_timeout: 30m
      - run:
          name: Send migration results to memstash
          command: |
            cd backend              
            if grep -q "has been executed successfully" Ram_migrations.txt;
            #if [ $? -eq 0 ]
              then
                echo "Migration is Succesfullly Completed"
                echo "Placing 1 to migration_${CIRCLE_WORKFLOW_ID:0:7}"
                curl -H "Content-Type: text/plain" -H "token: 75a942ed-f1df-4c6b-8c91-3fd221042720" --request PUT --data "1" https://api.memstash.io/values/migration
              else
                echo "Migration is Failed Try again"
                echo "Placing 0 to migration_${CIRCLE_WORKFLOW_ID:0:7}"
                curl -H "Content-Type: text/plain" -H "token: 75a942ed-f1df-4c6b-8c91-3fd221042720" --request PUT --data "0" https://api.memstash.io/values/migration
            fi
            #exit 1 # to check the rollback
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      #- revert-migrations
      #- destroy-environment:
      #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
          

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install PIP and aws cli
          command: |
            sudo apt-get install python-pip python-dev
            sudo pip install awscli
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --no-paginate --output text)            
            echo ${BACKEND_IP}
            echo NODE_ENV=production >> "frontend/.env"            
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"  # to send beckedn url to frontend env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp --recursive ./dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
        
      - revert-migrations
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
#      # Here's where you will add some code to rollback on failure      
#                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - run:
          name: Install ssh and git and aws cli
          command: |
            apk add --update openssh-client #Insatll ssh
            apk add --update git #Insatll git
            apk add --update tar gzip curl nodejs tree
            apk add --update npm
            pip install awscli # install aws cli
            
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["f8:c9:b0:b2:30:ed:73:81:a7:f5:18:75:ec:63:7b:19"] 
      - attach_workspace:
          at: ~/
      - run : |
          cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible 
            

      - run:
          name: add value in the backend/.env file
          command: |
            
            echo NODE_ENV=production >> "backend/.env"
            #echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat /root/project/backend/.env
            tar -czvf backend.tar.gz backend
      - run:
          name: Deploy backend
          command: |
            npm install webpack-dev-server -g
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
          no_output_timeout: 30m   

#      - revert-migrations
#      - destroy-environment:
#          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
#
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
     - image: python:3.7-alpine3.11
      # Lightweight Docker image 

    steps:
      - run:
          name: Install dependencies ssh and git and aws cli
          command: |
            apk add --update openssh-client #Insatll ssh
            apk add --update git #Insatll git
            apk add --update tar gzip curl nodejs tree
            apk add --update npm
            pip install awscli # install aws cli

    
      - checkout
      - attach_workspace:
          at: ~/
          
      - run:
          name: Get backend url for back end smoke test
          command: |
            BACKEND_IP=`(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --no-paginate --output text)`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            if curl -is ${API_URL}/api/status|grep "200" ; then  echo "backend smoke test passed"; else echo "backend smoke test failed"; fi

      - run:
          name: Frontend smoke test.
          command: |
            #exit 1 
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            echo Frontend_URL: ${URL}            
            if curl -s ${URL} | grep "Welcome"
            then
              return 0                          
            else
              return 1
            fi
            

      - revert-migrations
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}                
      

  cloudfront-update:
    docker:
       - image: amazon/aws-cli
      
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar gzip

      - run:
          name: store workflow ID before updating cloudfront 
          command: |
            OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo "Old workflow ID  is ${OldWorkflowID}"
            if [ ! -z $OldWorkflowID ]
            then
              curl -H "Content-Type: text/plain" -H "token: 8255788f-c262-4010-9e6e-d9e6a5748390" --request PUT --data ${OldWorkflowID} https://api.memstash.io/values/workflow_ID
            else
              echo "No WorkflowID found"
              return 1
            fi
            
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region us-west-2 \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=Udapeople
              
      - revert-migrations
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      
#
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:      
      - run:
          name: Get old stack workflow id and delete the old s3 bucket and stacks 
          command: |
            export OldWorkflowID=$(curl -H "token: 8255788f-c262-4010-9e6e-d9e6a5748390" --request GET https://api.memstash.io/values/workflow_ID)
            echo "Privious_workflow_id is ${OldWorkflowID}"
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --output text)
            echo " All Stacks are ${STACKS}"            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "starting operations for OldWorkflowID=${OldWorkflowID}"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name front-end-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name back-end-${OldWorkflowID}
            else
              echo "No stack deleted"
              exit 1
            fi
            
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]